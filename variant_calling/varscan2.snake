#############################
#Brad Wubbenhorst
#bwubb@pennmedicine.upenn.edu
#Mar. 2021

#This code is used to run VarScan2 paired somatic variant calling.

import os
import csv

include:"./sequenza.snake"

### INIT ###

#List of samples
with open(config.get('project',{}).get('sample_list','samples.list'),'r') as i:
    SAMPLES=i.read().splitlines()
    for sample in SAMPLES:
        os.makedirs(f'logs/cluster/{sample}',exist_ok=True)

#Tab separated file. Tumor Normal pairs
with open(config.get('project',{}).get('pairs_table','pairs.table'),'r') as p:
    PAIRS=dict(line.split('\t') for line in p.read().splitlines())

#Tab separated file. Sample /path/to/file.bam
with open(config.get('project',{}).get('bams_table','bams.table'),'r') as b:
    BAMS=dict(line.split('\t') for line in b.read().splitlines())

### FUNCTIONS ###

def paired_bams(wildcards):
    ref=config['reference']['key']
    tumor=wildcards.tumor
    normal=PAIRS[wildcards.tumor]
    return {'tumor':BAMS[wildcards.tumor],'normal':BAMS[normal]}

### SNAKEMAKE ###

wildcard_constraints:
    work_dir=f"data/work/{config['resources']['targets_key']}",
    results_dir=f"data/final/{config['project']['name']}"

rule collect_varscan2:
    input:
        expand("data/work/{lib}/{tumor}/varscan2/somatic.fpfilter.norm.clean.std.vcf.gz",lib=config['resources']['targets_key'],tumor=PAIRS.keys()),
        expand("data/work/{lib}/{tumor}/varscan2/loh.fpfilter.norm.clean.std.vcf.gz",lib=config['resources']['targets_key'],tumor=PAIRS.keys()),
        expand("data/work/{lib}/{tumor}/varscan2/germline.fpfilter.norm.clean.std.vcf.gz",lib=config['resources']['targets_key'],tumor=PAIRS.keys())

rule pair_mpileup:
    input:
        unpack(paired_bams)
    output:
        "{work_dir}/{tumor}/varscan2/normal_tumor.mpileup"
    params:
        ref=config['reference']['fasta'],
        bed=config['resources']['targets_bed']
    shell:
        "samtools mpileup -ABR -f {params.ref} -l {params.bed} -o {output} -Q 20 {input.normal} {input.tumor}"

rule run_VarScan2:
    input:
        pileup="{work_dir}/{tumor}/varscan2/normal_tumor.mpileup",
        CP="{work_dir}/{tumor}/sequenza/{tumor}_confints_CP.txt"
    output:
        indel="{work_dir}/{tumor}/varscan2/variants.raw.indel.vcf",
        snp="{work_dir}/{tumor}/varscan2/variants.raw.snp.vcf"
        #Note the none plural
        #I can use --output-snp and indel to name files
    params:
        prefix="{work_dir}/{tumor}/varscan2/variants.raw",
        args='--min-coverage 3 --min-var-freq 0.08 --p-value 0.10 --somatic-p-value 0.05 --strand-filter 0',
        memory='16g'
        #old settings: args="--min-coverage 5 --p-value 0.98 --strand-filter 1"
    run:
        with open(input["CP"],'r') as file:
            lines=file.read().splitlines()
            purity=lines[3].split('\t')[0]#3 for max
        shell(f"java -Xmx{params.memory} -jar $HOME/software/varscan/VarScan.v2.4.4.jar somatic {input.pileup} {params.prefix} --mpileup 1 --output-vcf 1 --tumor-purity {purity} {params.args}")

rule VarScan2_processSomatic:
    input:
        snp="{work_dir}/{tumor}/varscan2/variants.raw.snp.vcf",
        indel="{work_dir}/{tumor}/varscan2/variants.raw.indel.vcf"
    output:
        "{work_dir}/{tumor}/varscan2/somatic.raw.snp.vcf",
        "{work_dir}/{tumor}/varscan2/somatic.raw.indel.vcf",
        "{work_dir}/{tumor}/varscan2/loh.raw.snp.vcf",
        "{work_dir}/{tumor}/varscan2/loh.raw.indel.vcf",
        "{work_dir}/{tumor}/varscan2/germline.raw.snp.vcf",
        "{work_dir}/{tumor}/varscan2/germline.raw.indel.vcf"
    params:
        #--min-tumor-freq - Minimum variant allele frequency in tumor [0.10]
        #--max-normal-freq - Maximum variant allele frequency in normal [0.05]
        #--p-value - P-value for high-confidence calling [0.07]
    shell:
        """
        java -jar ~/software/varscan/VarScan.v2.4.4.jar processSomatic {input.snp}
        java -jar ~/software/varscan/VarScan.v2.4.4.jar processSomatic {input.indel}
        mv {wildcards.work_dir}/{wildcards.tumor}/varscan2/variants.raw.snp.Somatic.vcf {wildcards.work_dir}/{wildcards.tumor}/varscan2/somatic.raw.snp.vcf
        mv {wildcards.work_dir}/{wildcards.tumor}/varscan2/variants.raw.indel.Somatic.vcf {wildcards.work_dir}/{wildcards.tumor}/varscan2/somatic.raw.indel.vcf
        mv {wildcards.work_dir}/{wildcards.tumor}/varscan2/variants.raw.snp.LOH.vcf {wildcards.work_dir}/{wildcards.tumor}/varscan2/loh.raw.snp.vcf
        mv {wildcards.work_dir}/{wildcards.tumor}/varscan2/variants.raw.indel.LOH.vcf {wildcards.work_dir}/{wildcards.tumor}/varscan2/loh.raw.indel.vcf
        mv {wildcards.work_dir}/{wildcards.tumor}/varscan2/variants.raw.snp.Germline.vcf {wildcards.work_dir}/{wildcards.tumor}/varscan2/germline.raw.snp.vcf
        mv {wildcards.work_dir}/{wildcards.tumor}/varscan2/variants.raw.indel.Germline.vcf {wildcards.work_dir}/{wildcards.tumor}/varscan2/germline.raw.indel.vcf
        """

rule bamreadcount_somatic_regions:
    input:
        "{work_dir}/{tumor}/varscan2/somatic.raw.snp.vcf",
        "{work_dir}/{tumor}/varscan2/somatic.raw.indel.vcf"
    output:
        "{work_dir}/{tumor}/varscan2/somatic.raw.snp.regions",
        "{work_dir}/{tumor}/varscan2/somatic.raw.indel.regions"
    script:
        "bam-readcount_regions.py"

rule bamreadcount_somatic_readcounts:
    input:
        bam=lambda wildcards: BAMS[wildcards.tumor],
        snp="{work_dir}/{tumor}/varscan2/somatic.raw.snp.regions",
        indel="{work_dir}/{tumor}/varscan2/somatic.raw.indel.regions"
    output:
        snp="{work_dir}/{tumor}/varscan2/somatic.raw.snp.readcounts",
        indel="{work_dir}/{tumor}/varscan2/somatic.raw.indel.readcounts"
    params:
        ref=config['reference']['fasta']
    shell:
        """
        $HOME/software/bam-readcount/bin/bam-readcount -b 15 -q 1 -w 1 -f {params.ref} -l {input.snp} {input.bam} > {output.snp}
        $HOME/software/bam-readcount/bin/bam-readcount -i -b 15 -q 1 -w 1 -f {params.ref} -l {input.indel} {input.bam} > {output.indel}
        """

#the precision of variant and mutation calling by removing artifacts associated with short-read alignment.
#-For somatic mutations, generate bam-readcounts with the Tumor BAM. For LOH and Germline, generate readcounts with the Normal BAM
#-For de novo mutations (trio calling), generate readcounts with the child BAM.
#The filter requires the bam-readcount utility: https://github.com/genome/bam-readcount

rule VarScan2_somatic_fpfilter:
    input:
        snp_vcf="{work_dir}/{tumor}/varscan2/somatic.raw.snp.vcf",
        indel_vcf="{work_dir}/{tumor}/varscan2/somatic.raw.indel.vcf",
        snp_readcount="{work_dir}/{tumor}/varscan2/somatic.raw.snp.readcounts",
        indel_readcount="{work_dir}/{tumor}/varscan2/somatic.raw.indel.readcounts"
    output:
        snp_out="{work_dir}/{tumor}/varscan2/somatic.fpfilter.snp.out",
        indel_out="{work_dir}/{tumor}/varscan2/somatic.fpfilter.indel.out"
    shell:
        """
        java -jar $HOME/software/varscan/VarScan.v2.4.4.jar fpfilter {input.snp_vcf} {input.snp_readcount} --output-file {output.snp_out} --keep-failures
        java -jar $HOME/software/varscan/VarScan.v2.4.4.jar fpfilter {input.indel_vcf} {input.indel_readcount} --output-file {output.indel_out} --keep-failures
        """
        ##
        #For VarScan fpfilter (--dream-3-settings):
        #--min-var-count = 3
        #--min-var-count-lc = 1
        #--min-strandedness = 0
        #--min-var-basequal = 30
        #--min-ref-readpos = 0.20
        #--min-ref-dist3 = 0.20
        #--min-var-readpos = 0.15
        #--min-var-dist3 = 0.15
        #--max-rl-diff = 0.05
        #--max-mapqual-diff = 10
        #--min-ref-mapqual = 20
        #--min-var-mapqual = 30
        #--max-var-mmqs = 100
        #--max-ref-mmqs = 50

rule Varscan2_somatic_fix_output:
    input:
        "{work_dir}/{tumor}/varscan2/somatic.fpfilter.snp.out",
        "{work_dir}/{tumor}/varscan2/somatic.fpfilter.indel.out"
    output:
        "{work_dir}/{tumor}/varscan2/somatic.fpfilter.snps.vcf",
        "{work_dir}/{tumor}/varscan2/somatic.fpfilter.indels.vcf"
    script:
        'fix_varscan2_out.py'
        #revisit

rule VarScan2_somatic_merge:
    input:
        snp="{work_dir}/{tumor}/varscan2/somatic.fpfilter.snps.vcf",
        indel="{work_dir}/{tumor}/varscan2/somatic.fpfilter.indels.vcf"
    output:
        "{work_dir}/{tumor}/varscan2/somatic.fpfilter.vcf.gz"
    params:
        bgzsnp="{work_dir}/{tumor}/varscan2/somatic.snps.fpfilter.vcf.gz",
        bgzindel="{work_dir}/{tumor}/varscan2/somatic.indels.fpfilter.vcf.gz"
    shell:
        """
        bgzip -c {input.snp} > {params.bgzsnp}
        tabix -f -p vcf {params.bgzsnp}
        bgzip -c {input.indel} > {params.bgzindel}
        tabix -f -p vcf {params.bgzindel}
        bcftools concat -a {params.bgzsnp} {params.bgzindel}| bcftools sort -O z -o {output}
        tabix -f -p vcf {output}
        """

rule VarScan2_somatic_normalized:
    input:
        "{work_dir}/{tumor}/varscan2/somatic.fpfilter.vcf.gz"
    output:
        norm="{work_dir}/{tumor}/varscan2/somatic.fpfilter.norm.vcf.gz",
        clean="{work_dir}/{tumor}/varscan2/somatic.fpfilter.norm.clean.vcf.gz"
    params:
        regions=config['resources']['targets_bedgz']
    shell:
        """
        bcftools norm -m-both {input} | bcftools norm -f /home/bwubb/resources/Genomes/Human/GRCh37/human_g1k_v37.fasta -O z -o {output.norm}
        tabix -f -p vcf {output.norm}
        bcftools view -e 'ALT~\"*\"' -R {params.regions} {output.norm} | bcftools sort -O z -o {output.clean}
        tabix -f -p vcf {output.clean}
        """

rule VarScan2_somatic_standardized:
    input:
        "{work_dir}/{tumor}/varscan2/somatic.fpfilter.norm.clean.vcf.gz"
    output:
        "{work_dir}/{tumor}/varscan2/somatic.fpfilter.norm.clean.std.vcf.gz"
    params:
        tumor=lambda wildcards: wildcards.tumor,
        normal=lambda wildcards: PAIRS[wildcards.tumor],
        lib=config['resources']['targets_key'],
        mode='varscan2'
    shell:
        "python standardize_vcf.py -i {input} -T {params.tumor} -N {params.normal} --lib {params.lib} --mode {params.mode}"

rule VarScan2_somatic_annotation:
    input:
        "{work_dir}/{tumor}/varscan2/somatic.fpfilter.norm.clean.std.vcf.gz"
    output:
        "{work_dir}/{tumor}/varscan2/somatic.fpfilter.norm.clean.std.hg19_multianno.vcf"
    params:
        outname="{work_dir}/{tumor}/varscan2/somatic.fpfilter.norm.clean.std"
    shell:
        """
        table_annovar.pl {input} /home/bwubb/resources/annovar/humandb/ --buildver hg19 --vcfinput --outfile {params.outname} --protocol refGene,cytoband,gwasCatalog,genomicSuperDups,dbscsnv11,dbnsfp33a,popfreq_max_20150413,exac03,exac03nontcga,gnomad211_exome,avsnp150,clinvar_20190305 --operation g,r,r,r,f,f,f,f,f,f,f,f -remove
        bgzip {params.outname}.vcf
        tabix -f -p vcf {output}
        """

rule bamreadcount_loh_regions:
    input:
        "{work_dir}/{tumor}/varscan2/loh.raw.snp.vcf",
        "{work_dir}/{tumor}/varscan2/loh.raw.indel.vcf"
    output:
        "{work_dir}/{tumor}/varscan2/loh.raw.snp.regions",
        "{work_dir}/{tumor}/varscan2/loh.raw.indel.regions"
    script:
        "bam-readcount_regions.py"

rule bamreadcount_loh_recounts:
    input:
        bam=lambda wildcards: BAMS[PAIRS[wildcards.tumor]],
        snp="{work_dir}/{tumor}/varscan2/loh.raw.snp.regions",
        indel="{work_dir}/{tumor}/varscan2/loh.raw.indel.regions"
    output:
        snp="{work_dir}/{tumor}/varscan2/loh.raw.snp.readcounts",
        indel="{work_dir}/{tumor}/varscan2/loh.raw.indel.readcounts"
    params:
        ref=config['reference']['fasta']
    shell:
        """
        $HOME/software/bam-readcount/bin/bam-readcount -b 15 -q 1 -w 1 -f {params.ref} -l {input.snp} {input.bam} > {output.snp}
        $HOME/software/bam-readcount/bin/bam-readcount -i -b 15 -q 1 -w 1 -f {params.ref} -l {input.indel} {input.bam} > {output.indel}
        """

rule VarScan2_loh_fpfilter:
    input:
        snp_vcf="{work_dir}/{tumor}/varscan2/loh.raw.snp.vcf",
        indel_vcf="{work_dir}/{tumor}/varscan2/loh.raw.indel.vcf",
        snp_readcount="{work_dir}/{tumor}/varscan2/loh.raw.snp.readcounts",
        indel_readcount="{work_dir}/{tumor}/varscan2/loh.raw.indel.readcounts"
    output:
        snps="{work_dir}/{tumor}/varscan2/loh.snps.fpfilter.vcf.gz",
        indels="{work_dir}/{tumor}/varscan2/loh.indels.fpfilter.vcf.gz"
    params:
        snp_out="{work_dir}/{tumor}/varscan2/loh.snps.fpfilter.vcf",
        indel_out="{work_dir}/{tumor}/varscan2/loh.indels.fpfilter.vcf"
    shell:
        """
        java -jar $HOME/software/varscan/VarScan.v2.4.4.jar fpfilter {input.snp_vcf} {input.snp_readcount} --output-file {params.snp_out}
        bgzip {params.snp_out}
        tabix -f -p vcf {output.snps}
        java -jar $HOME/software/varscan/VarScan.v2.4.4.jar fpfilter {input.indel_vcf} {input.indel_readcount} --output-file {params.indel_out}
        bgzip {params.indel_out}
        tabix -f -p vcf {output.indels}
        """

rule VarScan2_loh_merge:
    input:
        snp_vcf="{work_dir}/{tumor}/varscan2/loh.snps.fpfilter.vcf.gz",
        indel_vcf="{work_dir}/{tumor}/varscan2/loh.indels.fpfilter.vcf.gz"
    output:
        "{work_dir}/{tumor}/varscan2/loh.fpfilter.vcf.gz"
    shell:
        """
        bcftools concat -a {input} | bcftools sort -O z -o {output}
        tabix -f -p vcf {output}
        """

rule VarScan2_loh_normalized:
    input:
        "{work_dir}/{tumor}/varscan2/loh.fpfilter.vcf.gz"
    output:
        norm="{work_dir}/{tumor}/varscan2/loh.fpfilter.norm.vcf.gz",
        clean="{work_dir}/{tumor}/varscan2/loh.fpfilter.norm.clean.vcf.gz"
    params:
        regions=config['resources']['targets_bedgz'],
    shell:
        """
        bcftools norm -m-both {input} | bcftools norm -f /home/bwubb/resources/Genomes/Human/GRCh37/human_g1k_v37.fasta -O z -o {output.norm}
        tabix -f -p vcf {output.norm}
        bcftools view -e 'ALT~\"*\"' -R {params.regions} {output.norm} | bcftools sort -O z -o {output.clean}
        tabix -f -p vcf {output.clean}
        """

rule VarScan2_loh_standardized:
    input:
        "{work_dir}/{tumor}/varscan2/loh.fpfilter.norm.clean.vcf.gz"
    output:
        "{work_dir}/{tumor}/varscan2/loh.fpfilter.norm.clean.std.vcf.gz"
    params:
        tumor=lambda wildcards: wildcards.tumor,
        normal=lambda wildcards: PAIRS[wildcards.tumor],
        lib=config['resources']['targets_key'],
        mode='varscan2'
    shell:
        "python standardize_vcf.py -i {input} -T {params.tumor} -N {params.normal} --lib {params.lib} --mode {params.mode}"

rule VarScan2_loh_annotation:
    input:
        "{work_dir}/{tumor}/varscan2/loh.fpfilter.norm.clean.std.vcf.gz"
    output:
        "{work_dir}/{tumor}/varscan2/loh.fpfilter.norm.clean.std.hg19_multianno.vcf.gz"
    params:
        outname="{work_dir}/{tumor}/varscan2/loh.fpfilter.norm.clean.std"
    shell:
        """
        table_annovar.pl {input} /home/bwubb/resources/annovar/humandb/ --buildver hg19 --vcfinput --outfile {params.outname} --protocol refGene,cytoband,gwasCatalog,genomicSuperDups,dbscsnv11,dbnsfp33a,popfreq_max_20150413,exac03,exac03nontcga,gnomad211_exome,avsnp150,clinvar_20190305 --operation g,r,r,r,f,f,f,f,f,f,f,f -remove
        bgzip {params.outname}.vcf
        tabix -f -p vcf {output}
        """

rule bamreadcount_germline_regions:
    input:
        "{work_dir}/{tumor}/varscan2/germline.raw.snp.vcf",
        "{work_dir}/{tumor}/varscan2/germline.raw.indel.vcf"
    output:
        "{work_dir}/{tumor}/varscan2/germline.raw.snp.regions",
        "{work_dir}/{tumor}/varscan2/germline.raw.indel.regions"
    script:
        "bam-readcount_regions.py"

rule bamreadcount_germline_recounts:
    input:
        bam=lambda wildcards: BAMS[PAIRS[wildcards.tumor]],
        snp="{work_dir}/{tumor}/varscan2/germline.raw.snp.regions",
        indel="{work_dir}/{tumor}/varscan2/germline.raw.indel.regions"
    output:
        snp="{work_dir}/{tumor}/varscan2/germline.raw.snp.readcounts",
        indel="{work_dir}/{tumor}/varscan2/germline.raw.indel.readcounts"
    params:
        ref=config['reference']['fasta']
    shell:
        """
        $HOME/software/bam-readcount/bin/bam-readcount -b 15 -q 1 -w 1 -f {params.ref} -l {input.snp} {input.bam} > {output.snp}
        $HOME/software/bam-readcount/bin/bam-readcount -i -b 15 -q 1 -w 1 -f {params.ref} -l {input.indel} {input.bam} > {output.indel}
        """

rule VarScan2_germline_fpfilter:
    input:
        snp_vcf="{work_dir}/{tumor}/varscan2/germline.raw.snp.vcf",
        indel_vcf="{work_dir}/{tumor}/varscan2/germline.raw.indel.vcf",
        snp_readcount="{work_dir}/{tumor}/varscan2/germline.raw.snp.readcounts",
        indel_readcount="{work_dir}/{tumor}/varscan2/germline.raw.indel.readcounts"
    output:
        snps="{work_dir}/{tumor}/varscan2/germline.snps.fpfilter.vcf.gz",
        indels="{work_dir}/{tumor}/varscan2/germline.indels.fpfilter.vcf.gz"
    params:
        snp_out="{work_dir}/{tumor}/varscan2/germline.snps.fpfilter.vcf",
        indel_out="{work_dir}/{tumor}/varscan2/germline.indels.fpfilter.vcf"
    shell:
        """
        java -jar $HOME/software/varscan/VarScan.v2.4.4.jar fpfilter {input.snp_vcf} {input.snp_readcount} --output-file {params.snp_out}
        bgzip {params.snp_out}
        tabix -f -p vcf {output.snps}
        java -jar $HOME/software/varscan/VarScan.v2.4.4.jar fpfilter {input.indel_vcf} {input.indel_readcount} --output-file {params.indel_out}
        bgzip {params.indel_out}
        tabix -f -p vcf {output.indels}
        """

rule VarScan2_germline_merge:
    input:
        snp_vcf="{work_dir}/{tumor}/varscan2/germline.snps.fpfilter.vcf.gz",
        indel_vcf="{work_dir}/{tumor}/varscan2/germline.indels.fpfilter.vcf.gz"
    output:
        "{work_dir}/{tumor}/varscan2/germline.fpfilter.vcf.gz"
    shell:
        """
        bcftools concat -a {input} | bcftools sort -O z -o {output}
        tabix -f -p vcf {output}
        """

rule VarScan2_germline_normalized:
    input:
        "{work_dir}/{tumor}/varscan2/germline.fpfilter.vcf.gz"
    output:
        norm="{work_dir}/{tumor}/varscan2/germline.fpfilter.norm.vcf.gz",
        clean="{work_dir}/{tumor}/varscan2/germline.fpfilter.norm.clean.vcf.gz"
    params:
        regions=config['resources']['targets_bedgz'],
    shell:
        """
        bcftools norm -m-both {input} | bcftools norm -f /home/bwubb/resources/Genomes/Human/GRCh37/human_g1k_v37.fasta -O z -o {output.norm}
        tabix -f -p vcf {output.norm}
        bcftools view -e 'ALT~\"*\"' -R {params.regions} {output.norm} | bcftools sort -O z -o {output.clean}
        tabix -f -p vcf {output.clean}
        """

rule VarScan2_germline_standardized:
    input:
        "{work_dir}/{tumor}/varscan2/germline.fpfilter.norm.clean.vcf.gz"
    output:
        "{work_dir}/{tumor}/varscan2/germline.fpfilter.norm.clean.std.vcf.gz"
    params:
        tumor=lambda wildcards: wildcards.tumor,
        normal=lambda wildcards: PAIRS[wildcards.tumor],
        lib=config['resources']['targets_key'],
        mode='varscan2'
    shell:
        "python standardize_vcf.py -i {input} -T {params.tumor} -N {params.normal} --lib {params.lib} --mode {params.mode}"

rule VarScan2_germline_annotation:
    input:
        "{work_dir}/{tumor}/varscan2/germline.fpfilter.norm.clean.std.vcf.gz"
    output:
        "{work_dir}/{tumor}/varscan2/germline.fpfilter.norm.clean.std.hg19_multianno.vcf"
    params:
        outname="{work_dir}/{tumor}/varscan2/germline.fpfilter.norm.clean.std"
    shell:
        """
        table_annovar.pl {input} /home/bwubb/resources/annovar/humandb/ --buildver hg19 --vcfinput --outfile {params.outname} --protocol refGene,cytoband,gwasCatalog,genomicSuperDups,dbscsnv11,dbnsfp33a,popfreq_max_20150413,exac03,exac03nontcga,gnomad211_exome,avsnp150,clinvar_20190305 --operation g,r,r,r,f,f,f,f,f,f,f,f -remove
        bgzip {params.outname}.vcf
        tabix -f -p vcf {output}
        """

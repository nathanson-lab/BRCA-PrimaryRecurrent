#############################
#Brad Wubbenhorst
#bwubb@pennmedicine.upenn.edu
#Mar. 2021

#This code is used to run VarDictJava paired somatic variant calling.

import os

### INIT ###

#List of samples
with open(config.get('project',{}).get('sample_list','samples.list'),'r') as i:
    SAMPLES=i.read().splitlines()
    for sample in SAMPLES:
        os.makedirs(f'logs/cluster/{sample}',exist_ok=True)

#Tab separated file. Tumor Normal pairs
with open(config.get('project',{}).get('pairs_table','pairs.table'),'r') as p:
    PAIRS=dict(line.split('\t') for line in p.read().splitlines())

#Tab separated file. Sample /path/to/file.bam
with open(config.get('project',{}).get('bams_table','bams.table'),'r') as b:
    BAMS=dict(line.split('\t') for line in b.read().splitlines())

### FUNCTIONS ###

def paired_bams(wildcards):
    ref=config['reference']['key']
    tumor=wildcards.tumor
    normal=PAIRS[wildcards.tumor]
    return {'tumor':BAMS[wildcards.tumor],'normal':BAMS[normal]}

### SNAKEMAKE ###

wildcard_constraints:
    work_dir=f"data/work/{config['resources']['targets_key']}"

rule collect_vardict:
    input:
        expand("data/work/{lib}/{tumor}/vardict/somatic.twice_filtered.norm.clean.std.vcf.gz",lib=config['resources']['targets_key'],tumor=PAIRS.keys()),
        expand("data/work/{lib}/{tumor}/vardict/loh.twice_filtered.norm.clean.std.vcf.gz",lib=config['resources']['targets_key'],tumor=PAIRS.keys()),
        expand("data/work/{lib}/{tumor}/vardict/germline.twice_filtered.norm.clean.std.vcf.gz",lib=config['resources']['targets_key'],tumor=PAIRS.keys())

rule run_VarDictJava:
    input:
        unpack(paired_bams)
    output:
        raw="{work_dir}/{tumor}/vardict/variants.raw.vcf.gz"
    params:
        ref=config['reference']['fasta'],
        bed=config['resources']['targets_bed'],
        path="$HOME/software/VarDictJava/VarDict",
        normal=lambda wildcards: PAIRS[wildcards.tumor],
        AF_THR=0.01
    threads:
        4
    shell:
        """
        $HOME/software/VarDictJava/build/install/VarDict/bin/VarDict -th {threads} -G {params.ref} -f {params.AF_THR} -N {wildcards.tumor} -b '{input.tumor}|{input.normal}' -c 1 -S 2 -E 3 -g 4 {params.bed} | {params.path}/testsomatic.R | {params.path}/var2vcf_paired.pl -N '{wildcards.tumor}|{params.normal}' -f {params.AF_THR} | bgzip -c > {output.raw}
        tabix -p vcf {output.raw}
        """

rule VarDict_filter:
    input:
        "{work_dir}/{tumor}/vardict/variants.raw.vcf.gz"
    output:
        somatic="{work_dir}/{tumor}/vardict/somatic.raw.vcf.gz",
        once="{work_dir}/{tumor}/vardict/variants.once_filtered.vcf.gz",
        twice="{work_dir}/{tumor}/vardict/variants.twice_filtered.vcf.gz"
    shell:
        """
        bcftools view -i 'INFO/STATUS==\"StrongSomatic\" || INFO/STATUS==\"LikelySomatic\"' -O z -o {output.somatic} {input}
        tabix -p vcf {output.somatic}
        bcftools filter --threads {threads} -e '((FORMAT/AF[0] * FORMAT/DP[0] < 6) && ((FORMAT/MQ[0] < 55.0 && FORMAT/NM[0] > 1.0) || (FORMAT/MQ[0] < 60.0 && FORMAT/NM[0] > 2.0) || (FORMAT/DP[0] < 10) || (QUAL < 45)))' -s filter_1 -m + -O z {input} > {output.once}
        tabix -p vcf {output.once}
        bcftools filter --threads {threads} -e 'FORMAT/AF[0] < 0.2 && FORMAT/QUAL[0] < 55 && INFO/SSF[0] > 0.06' -s filter_2 -m + -O z {output.once} > {output.twice}
        tabix -p vcf {output.twice}
        """

rule VarDict_split:
    input:
        "{work_dir}/{tumor}/vardict/variants.twice_filtered.vcf.gz"
    output:
        somatic="{work_dir}/{tumor}/vardict/somatic.twice_filtered.vcf.gz",
        loh="{work_dir}/{tumor}/vardict/loh.twice_filtered.vcf.gz",
        germline="{work_dir}/{tumor}/vardict/germline.twice_filtered.vcf.gz"
    shell:
        """
        bcftools view -i 'INFO/STATUS==\"StrongSomatic\" || INFO/STATUS==\"LikelySomatic\"' -O z -o {output.somatic} {input} && tabix -p vcf {output.somatic}
        bcftools view -i 'INFO/STATUS==\"StrongLOH\" || INFO/STATUS==\"LikelyLOH\"' -O z -o {output.loh} {input} && tabix -p vcf {output.loh}
        bcftools view -i 'INFO/STATUS==\"Germline\"' -O z -o {output.germline} {input} && tabix -p vcf {output.germline}
        """

rule VarDict_somatic_normalized:
    input:
        "{work_dir}/{tumor}/vardict/somatic.twice_filtered.vcf.gz"
    output:
        norm="{work_dir}/{tumor}/vardict/somatic.twice_filtered.norm.vcf.gz",
        clean="{work_dir}/{tumor}/vardict/somatic.twice_filtered.norm.clean.vcf.gz"
    params:
        regions=config['resources']['targets_bedgz'],
        ref=config['reference']['fasta']
    shell:
        """
        bcftools norm -m-both {input} | bcftools norm -f {params.ref} -O z -o {output.norm}
        tabix -f -p vcf {output.norm}
        bcftools view -e 'ALT~\"*\"' -R {params.regions} {output.norm} | bcftools sort -O z -o {output.clean}
        tabix -f -p vcf {output.clean}
        """

rule VarDict_somatic_standardized:
    input:
        "{work_dir}/{tumor}/vardict/somatic.twice_filtered.norm.clean.vcf.gz"
    output:
        "{work_dir}/{tumor}/vardict/somatic.twice_filtered.norm.clean.std.vcf.gz"
    params:
        tumor=lambda wildcards: wildcards.tumor,
        normal=lambda wildcards: PAIRS[wildcards.tumor],
        lib=config['resources']['targets_key'],
        mode='vardict'
    shell:
        "python standardize_vcf.py -i {input} -T {params.tumor} -N {params.normal} -m {params.mode}"

rule VarDict_loh_normalized:
    input:
        "{work_dir}/{tumor}/vardict/loh.twice_filtered.vcf.gz"
    output:
        norm="{work_dir}/{tumor}/vardict/loh.twice_filtered.norm.vcf.gz",
        clean="{work_dir}/{tumor}/vardict/loh.twice_filtered.norm.clean.vcf.gz"
    params:
        regions=config['resources']['targets_bedgz'],
        ref=config['reference']['fasta']
    shell:
        """
        bcftools norm -m-both {input} | bcftools norm -f {params.ref} -O z -o {output.norm}
        tabix -f -p vcf {output.norm}
        bcftools view -e 'ALT~\"*\"' -R {params.regions} {output.norm} | bcftools sort -O z -o {output.clean}
        tabix -f -p vcf {output.clean}
        """

rule VarDict_loh_standardized:
    input:
        "{work_dir}/{tumor}/vardict/loh.twice_filtered.norm.clean.vcf.gz"
    output:
        "{work_dir}/{tumor}/vardict/loh.twice_filtered.norm.clean.std.vcf.gz"
    params:
        tumor=lambda wildcards: wildcards.tumor,
        normal=lambda wildcards: PAIRS[wildcards.tumor],
        lib=config['resources']['targets_key'],
        mode='vardict'
    shell:
        "python standardize_vcf.py -i {input} -T {params.tumor} -N {params.normal} -m {params.mode}"

rule VarDict_germline_normalized:
    input:
        "{work_dir}/{tumor}/vardict/germline.twice_filtered.vcf.gz"
    output:
        norm="{work_dir}/{tumor}/vardict/germline.twice_filtered.norm.vcf.gz",
        clean="{work_dir}/{tumor}/vardict/germline.twice_filtered.norm.clean.vcf.gz"
    params:
        regions=config['resources']['targets_bedgz'],
        ref=config['reference']['fasta']
    shell:
        """
        bcftools norm -m-both {input} | bcftools norm -f {params.ref} -O z -o {output.norm}
        tabix -f -p vcf {output.norm}
        bcftools view -e 'ALT~\"*\"' -R {params.regions} {output.norm} | bcftools sort -O z -o {output.clean}
        tabix -f -p vcf {output.clean}
        """

rule VarDict_germline_standardized:
    input:
        "{work_dir}/{tumor}/vardict/germline.twice_filtered.norm.clean.vcf.gz"
    output:
        "{work_dir}/{tumor}/vardict/germline.twice_filtered.norm.clean.std.vcf.gz"
    params:
        tumor=lambda wildcards: wildcards.tumor,
        normal=lambda wildcards: PAIRS[wildcards.tumor],
        lib=config['resources']['targets_key'],
        mode='vardict'
    shell:
        "python standardize_vcf.py -i {input} -T {params.tumor} -N {params.normal} -m {params.mode}"